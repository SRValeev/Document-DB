# query.py (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
import json
from qdrant_client import QdrantClient
from qdrant_client.models import Filter
from sentence_transformers import SentenceTransformer
from utils.helpers import load_config, normalize_text

class RAGSystem:
    def __init__(self):
        self.config = load_config()
        self.client = QdrantClient(
            host=self.config['qdrant']['host'],
            port=self.config['qdrant']['port'],
            timeout=10
        )
        self.embedding_model = SentenceTransformer(
            self.config['processing']['embedding_model']
        )
        self.min_score = self.config['processing']['min_similarity']
    
    def search(self, query, top_k=5):
        try:
            # –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
            query_embedding = self.embedding_model.encode([normalize_text(query)])[0].tolist()
            
            results = self.client.search(
                collection_name=self.config['qdrant']['collection_name'],
                query_vector=query_embedding,
                limit=top_k,
                with_payload=True,
                score_threshold=self.min_score
            )
            
            if not results:
                return "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            
            output = []
            for idx, result in enumerate(results, 1):
                payload = result.payload
                metadata = payload.get('metadata', {})
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
                context = ""
                if metadata.get('chapter'):
                    context += f"–†–∞–∑–¥–µ–ª: {metadata['chapter']}\n"
                if metadata.get('section'):
                    context += f"–ü–æ–¥—Ä–∞–∑–¥–µ–ª: {metadata['section']}\n"
                
                context += f"–¢–µ–∫—Å—Ç: {payload['text']}"
                
                output.append(
                    f"–†–µ–∑—É–ª—å—Ç–∞—Ç #{idx}\n"
                    f"üìÑ –ò—Å—Ç–æ—á–Ω–∏–∫: {metadata.get('source', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    f"üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {metadata.get('page', 'N/A')}\n"
                    f"üîç –°—Ö–æ–¥—Å—Ç–≤–æ: {result.score:.4f}\n\n"
                    f"üìù –ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}\n"
                    f"{'='*50}"
                )
            
            return "\n\n".join(output) if output else "–ù–∞–π–¥–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –Ω–æ –±–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"
        
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}"

    def debug_check_data(self):
        """–ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            records = self.client.scroll(
                collection_name=self.config['qdrant']['collection_name'],
                limit=3,
                with_payload=True
            )[0]
            
            print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤—ã—Ö 3 –∑–∞–ø–∏—Å–µ–π –≤ Qdrant:")
            for record in records:
                print(f"\nID: {record.id}")
                print(f"–¢–µ–∫—Å—Ç: {record.payload.get('text', '–ù–ï–¢ –¢–ï–ö–°–¢–ê')[:200]}...")
                print(f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {json.dumps(record.payload.get('metadata', {}), indent=2, ensure_ascii=False)}")
        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

if __name__ == "__main__":
    rag = RAGSystem()
    
    # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ:
    # rag.debug_check_data()
    
    while True:
        query = input("\nüîç –í–∞—à –≤–æ–ø—Ä–æ—Å (–∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞): ")
        if query.lower() == 'exit':
            break
        
        results = rag.search(query)
        print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:")
        print(results)